[
{
	"uri": "//localhost:1313/1-introduce/1.1-awscodebuild/",
	"title": "AWS Code Build",
	"tags": [],
	"description": "",
	"content": "AWS Code Build AWS CodeBuild is a fully managed continuous integration service. You just specify the location of your source code, choose your build settings, and CodeBuild will run build scripts for compiling, testing, and packaging your code. There are no servers to provision and scale, or software to install, configure, and operate.\n"
},
{
	"uri": "//localhost:1313/4-createbuildproject/4.1-configawscodebuild/",
	"title": "Config AWS CodeBuild",
	"tags": [],
	"description": "",
	"content": "Config AWS Code Build In the Project name field, enter Build-DevOpsGettingStarted. Select GitHub from the Source provider dropdown menu. Confirm that the Connect using OAuth radio button is selected. Choose the white Connect to GitHub button. A new browser tab will open asking you to give AWS CodeBuild access to your GitHub repo. Choose the green Authorize aws-codesuite button. Enter your GitHub password. Choose the orange Confirm button. Select Repository in my GitHub account. Enter aws-elastic-beanstalk-express-js-sample in the search field. Confirm that Managed Image is selected. Select Amazon Linux 2 from the Operating system dropdown menu. Select Standard from the Runtime(s) dropdown menu. Select aws/codebuild/amazonlinux2-x86_64-standard:3.0 from the Image dropdown menu. Confirm that Always use the latest image for this runtime version is selected for Image version. Confirm that New service role is selected. "
},
{
	"uri": "//localhost:1313/3-deloywebapp/3.1-createawselastic-beanstalk/",
	"title": "Create AWS Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Create AWS Elastic Beanstalk In a new browser tab, open the AWS Elastic Beanstalk console. Click Create Application button In Environment tier section\nSelect Web Server Enviroment In Application information\nInput your application name, enter DevOpsGettingStarted In Platform\nChoose Managed Platform Platform: Nodejs Platform branch: Node.js 20 running on 64bit Amazon Linux 2023 Platform version: 6.1.1 (Recommended) In Application Code:\nChoose Sample Application In Preset: Choose Single instance Click Next On the Configure service access screen, choose Use an existing service role for Service Role\nChoose aws-elasticbeanstalk-ec2-role in the Existing service role\nIn EC2 instance profile:\nIf aws-elasticbeanstalk-ec2-role displays in the dropdown list, select it from the EC2 instance profile dropdown list If another value displays in the list, and it’s the default EC2 instance profile intended for your environments, select it from the EC2 instance profile dropdown list. If the EC2 instance profile dropdown list doesn\u0026rsquo;t list any values to choose from, expand the procedure that follows, Create IAM Role for EC2 instance profile. Choose Skip to Review on the Configure service access page In Step 6: Review, click Submit "
},
{
	"uri": "//localhost:1313/",
	"title": "Create Continuous Delivery Pipeline with NodeJS",
	"tags": [],
	"description": "",
	"content": "Create Continuous Delivery Pipeline with NodeJS Overview In this lab, you will create a continuous delivery pipeline for a simple web application. You will first use a version control system to store your source code. Then, you will learn how to create a continuous delivery pipeline that will automatically deploy your web application whenever your source code is updated.\nContent Introduction Setup Git Repo Deploy Web App Creating Build Project Create Delivery Pipeline Resource Cleanup "
},
{
	"uri": "//localhost:1313/5-createdeliverypipeline/5.1-createnewpipeline/",
	"title": "Create New Pipeline",
	"tags": [],
	"description": "",
	"content": "Create New Pipeline: Go to AWS Console Find Code Pipeline Click Create Pipeline button In the Pipeline name field, enter Pipeline-DevOpsGettingStarted Confirm that New service role is selected. Click Next, go to next stage "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Create Continuous Delivery Pipeline Creating a Continuous Delivery (CD) pipeline using AWS services and GitHub involves several steps to automate the process of code deployment. Here\u0026rsquo;s a brief introduction to setting up such a pipeline:\nSource Stage: Your code resides in a GitHub repository, which acts as the source. Any change to the code triggers the pipeline.\nBuild Stage: AWS CodeBuild compiles your source code, runs tests, and produces software packages that are ready to deploy.\nDeploy Stage: AWS Elastic Beanstalk takes the build artifacts from CodeBuild and deploys them to an environment, handling the deployment details.\nPipeline Orchestration: AWS CodePipeline automates the workflow from code update to deployment. It connects to GitHub, triggers CodeBuild projects, and deploys using Elastic Beanstalk.\nHere\u0026rsquo;s a high-level overview of the steps involved:\nConnect GitHub to CodePipeline: Set up a webhook in GitHub to trigger your pipeline on a commit. Set up CodeBuild: Define build specifications and connect it to your pipeline. Configure Elastic Beanstalk: Prepare your environment for deployment and set it as the target for CodeBuild artifacts. Create the Pipeline: Use AWS CodePipeline to orchestrate the process, defining each stage and action based on the above services. For detailed instructions, AWS provides comprehensive guides and documentation¹. Remember, you\u0026rsquo;ll need appropriate IAM roles and permissions set up for these services to interact with each other securely.\nContents AWS Code Build AWS Code Pipeline AWS Elastic Beanstalk "
},
{
	"uri": "//localhost:1313/1-introduce/1.2-awscodepipeline/",
	"title": "AWS Code Pipeline",
	"tags": [],
	"description": "",
	"content": "AWS Code Pipeline AWS CodePipeline is a continuous integration and continuous delivery service for fast and reliable application and infrastructure updates. You can use CodePipeline to fully model and automate your software release processes.\n"
},
{
	"uri": "//localhost:1313/5-createdeliverypipeline/5.2-configthesourcestage/",
	"title": "Config The Source Stage",
	"tags": [],
	"description": "",
	"content": "Config The Source Stage: Now, you\u0026rsquo;re in Add Source Stage Click Github ( Version 1 ) Click Connect to Github After few steps to Authorizations, if succeed, you will recieve the notification Now, you need to choose the Github repository to working on it After that, you need select the branch Choose Github Webhooks Click Next "
},
{
	"uri": "//localhost:1313/4-createbuildproject/4.2-createbuildspec/",
	"title": "Create Build Spec",
	"tags": [],
	"description": "",
	"content": "Create Build Spec In Buildspec section Select Insert Build Commands Copy this code: version: 0.2 phases: build: commands: - npm i --save artifacts: files: - \u0026#39;**/*\u0026#39; 4. Click Create Application in the bottom.\n"
},
{
	"uri": "//localhost:1313/2-setupgitrepo/",
	"title": "Setup Git Repo",
	"tags": [],
	"description": "",
	"content": "Setup Git Repo In this section, you must have git repo, if you don\u0026rsquo;t have, you can fork this repo for your excersie https://github.com/fdat3/aws-elastic-beanstalk-express-js-sample\n"
},
{
	"uri": "//localhost:1313/5-createdeliverypipeline/5.3-configthebuildstage/",
	"title": "Config The Build Stage",
	"tags": [],
	"description": "",
	"content": "Config The Build Stage Now, this is the Add Build Stage step! From the Build provider dropdown menu, select AWS CodeBuild. Under Region, select the Region you was created the CodeBuild Project Select Build-DevOpsGettingStarted under Project name. Click Next button. "
},
{
	"uri": "//localhost:1313/3-deloywebapp/",
	"title": "Deloy Your App",
	"tags": [],
	"description": "",
	"content": "Deloy Your App In this section, you will use the AWS Elastic Beanstalk console to create and deploy a web application. You will use the Create web app wizard to create an application and launch an environment with the AWS resources needed to run your application. In subsequent modules, you will be using this environment and your continuous delivery pipeline to deploy the Hello World!\nContent Create AWS Elastic Beanstalk "
},
{
	"uri": "//localhost:1313/1-introduce/1.3-elasticbeanstalk/",
	"title": "Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "AWS Elastic Beanstalk AWS Elastic Beanstalk is the fastest way to get web applications up and running on AWS. You can simply upload your application code, and the service automatically handles details such as resource provisioning, load balancing, auto scaling, and monitoring. Elastic Beanstalk is ideal if you have a PHP, Java, Python, Ruby, Node.js, .NET, Go, or Docker web application. Elastic Beanstalk uses core AWS services such as Amazon Elastic Compute Cloud (EC2), Amazon Elastic Container Service (ECS), AWS Auto Scaling, and Elastic Load Balancing (ELB) to easily support applications that need to scale to serve millions of users.\n"
},
{
	"uri": "//localhost:1313/5-createdeliverypipeline/5.4-configthedeploystage/",
	"title": "Config The Deploy Stage",
	"tags": [],
	"description": "",
	"content": "Config The Deploy Stage After Config The Build Stage, now you go to the The Deploy Stage Select AWS Elastic Beanstalk from the Deploy provider. Under Region, confirm that the US West (Oregon) Region is selected. Select the field under Application name and confirm you can see the app DevOpsGettingStarted. Select DevOpsGettingStarted-env from the Environment name textbox. Click Next button to Review your config. Click Create Pipeline if everything is ok ! Congrats, now you can see the progress ! "
},
{
	"uri": "//localhost:1313/4-createbuildproject/",
	"title": "Create Build Project",
	"tags": [],
	"description": "",
	"content": "Create Build Project In this module, you will use AWS CodeBuild to build the source code previously stored in your GitHub repository. AWS CodeBuild is a fully managed continuous integration service that compiles source code, runs tests, and produces software packages that are ready to deploy.\nContent Config AWS Code Build Create Build Spec "
},
{
	"uri": "//localhost:1313/5-createdeliverypipeline/5.5-adding-tester-stage/",
	"title": "Adding Tester Stage",
	"tags": [],
	"description": "",
	"content": "Adding Tester Stage Now, go back to the AWS CodePipeline Console Click on your latest Pipeline, that\u0026rsquo;s Pipeline-DevOpsGettingStarted Click Edit button Choose the white Add stage button between the Build and Deploy stages. Put Tester for Stage name and click Add stage Good job bro, Tester Stage is here ! In the Tester stage, choose the white Add action group button. Under Action name, enter Manual_Test. From the Action provider dropdown, select Manual approval Confirm that the optional fields have been left blank. Go to the Top and click Save This is the Application architecture if you completed all the section in this workshop ! "
},
{
	"uri": "//localhost:1313/5-createdeliverypipeline/",
	"title": "Create Delivery Pipeline",
	"tags": [],
	"description": "",
	"content": "Content: In this section, you will use AWS CodePipeline to set up a continuous delivery pipeline with source, build, and deploy stages. The pipeline will detect changes in the code stored in your GitHub repository, build the source code using AWS CodeBuild, and then deploy your application to AWS Elastic Beanstalk.\nCreate New Pipeline Config The Source Stage Config The Build Stage Config The Deploy Stage "
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Delete AWS Elastic Beanstalk Application In a new browser window, open the AWS Elastic Beanstalk Console In the left navigation menu, click on \u0026ldquo;Applications.\u0026rdquo; You should see the \u0026ldquo;DevOpsGettingStarted\u0026rdquo; application listed under \u0026ldquo;All applications.\u0026rdquo; Select the radio button next to \u0026ldquo;DevOpsGettingStarted.\u0026rdquo; Delete AWS Code Pipeline In a new browser window, open the AWS Code Pipelines Console Select the radio button next to \u0026ldquo;Pipeline-DevOpsGettingStarted.\u0026rdquo; Click the white \u0026ldquo;Delete pipeline\u0026rdquo; button at the top of the page. Delete AWS S3 Bucket In a new browser window, open the AWS S3 Bucket You should see a bucket named \u0026ldquo;codepipeline-us-west-2\u0026rdquo; followed by your AWS account number. Click on this bucket. Inside this bucket, you should see a folder named \u0026ldquo;Pipeline-DevOpsGettingStarted.\u0026rdquo; Delete AWS Code Build In a new browser window, open the AWS Code Build In the left navigation, click on \u0026ldquo;Build projects\u0026rdquo; under \u0026ldquo;Build.\u0026rdquo; You should see the \u0026ldquo;Build-DevOpsGettingStarted\u0026rdquo; build project listed under \u0026ldquo;Build project.\u0026rdquo; Select the radio button next to \u0026ldquo;Build-DevOpsGettingStarted.\u0026rdquo; "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]